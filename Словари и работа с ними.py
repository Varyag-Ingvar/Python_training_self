d = {
    'moskva': 495,
    'piter': 812,
    'penza': 8412
}
r = dict(moskva=495,piter=812,penza=8412) # создаем словарь, метод работает только если ключ буквенный
print(r)

a = [['moskva', 495],['piter', 812],['penza', 8412]] # создание словаря из вложенных списков
t = dict(a)
print(t)

q = dict.fromkeys(['a','b','c'],100)  # присваиваем нескольким ключам одно значение(100)
print(q)

v = {}            # создание пустого словаря
#v = dict()       # еще один способ создания пустого словаря
print(v, type(v))

dic_1 = {
    1: 45,
    'hello': 'two',
    3: [1,2,3]
}
print(dic_1[1])   # по ключу получаем доступ к значению

dic_2 = {
    1: 'one',
    2: 'two',
    3: 'three'
}
dic_2[4]='four'   # создаем новый ключ 4 и присваиваем ему значение four
print(dic_2)

s = 'IVANOV IVAN Samara SGU 5 4 5 5 4 3 5'
person = {}                           # содаем пустой словарь person
s = s.split()                         # разделяем по пробелам строку s и помещаем в список
person["lastName"] = s[0]             # создаем в словаре person ключи и присваиваем им значения
person['firstName'] = s[1]            # из списка по их индексам
person['city'] = s[2]
person['university'] = s[3]
person['marks'] = []                  # создаем пустой список оценок marks
for i in s[4:]:                       # циклом for перебираем список s от 4 индекса и до конца
    person['marks'].append(int(i))    # и записываем каждую итерацию в список marks, приводя их к int
print(s)                              # т.к. изначально это строка, а нам нужны целые числа
print(person)

dic_3 = {
    1: 'one',
    2: 'two',
    3: 'three'
}
del dic_3[1]    # удаляем пару ключ-значение из словаря dic_3
print(dic_3)

print(len(dic_3))  # длина словаря
print(2 in dic_3)  # есть ли ключ 2 в словаре dic_3 (True or False)
print(5 in dic_3)  # есть ли ключ 5 в словаре dic_3

dic_4 = {
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four'
}
if 5 in dic_4:          # проверяем, есть ли в словаре dic_4 ключ 5
    print(dic_4[5])     # если есть, то выводим на экран
else:                   # в противном случае,
    dic_4[5] = 'five'   # создаем ключ 5 и присваиваем ему значение 'five'
print(dic_4)

dic_5 = {
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four'
}
# dic_5.clear()                     # удаляет все из словаря (очистка)
print(dic_5.get(1, 'No such key'))  # get обращается к ключу и получает значение
print(dic_5.get(5, 'No such key'))  # но если такого ключа нет, то выводит запись через запятую
print(dic_5.get(5))                 # или None, если ничего не указать после запятой
                                    # при этом get не изменяет ничего в словаре

print(dic_5.setdefault(5))          # setdefault работает аналогично get
print(dic_5)                        # но если он не находит заданного ключа, он запишет его в словарь
                                    # со значением None по умолчанию
dic_5.setdefault(6, 'six')          # или можно присвоить любое значение новому ключу через запятую
print(dic_5)

print(dic_5.pop(6))       # вернет значение заданного ключа и удалит данную пару ключ:значение из словаря
print(dic_5)
print(dic_5.popitem())    # вернет РАНДОМНУЮ пару ключ:значение и удалит данную пару из словаря
print(dic_5)

dic_6 = {
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four'
}
for k in dic_6.keys():    # .keys() проходимся по ключам
    print(k)

for v in dic_6.values():    # .values() проходимся по значениям
    print(v)

for k,v in dic_6.items():    # .items() проходимся по парам ключ-значение
    print(k,v)

for pair in dic_6.items():    # .items() проходимся по парам ключ-значение
    print(pair)               # и если оставим одну пременную, то выводит списком кортежей !!!
    print(pair[0], pair[1])   # и к ним (кортежам) можно обращаться по индексу и выводить отдельно